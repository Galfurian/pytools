[project]
name = "pytools"
version = "0.1.0"
description = "A collection of Python utility scripts for common tasks."
authors = [{ name = "Galfurian", email = "enry.frak@gmail.com" }]
maintainers = [{ name = "Galfurian", email = "enry.frak@gmail.com" }]
license = "MIT"
readme = "README.md"
requires-python = ">=3.10"
dependencies = []

[project.urls]
"Homepage" = "https://github.com/Galfurian/pytools"
"Repository" = "https://github.com/Galfurian/pytools"
"Bug Tracker" = "https://github.com/Galfurian/pytools/issues"

[project.optional-dependencies]
dev = ["ruff", "mypy", "pytest>=7.0.0"]

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = []

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN", # flake8-annotations
    "COM", # flake8-commas
    "C90", # mccabe complexity
    "DJ",  # django
    "EXE", # flake8-executable
    "T10", # debugger
    "T20", # print statements (acceptable for CLI output)
    "TID", # flake8-tidy-imports

    "D203", # incorrect-blank-line-before-class
    "D212", # multi-line-summary-first-line
    "D213", # multi-line-summary-second-line
    "D401", # First line of docstring should be in imperative mood
    "D205", # 1 blank line required between summary line and description
    "D200", # One-line docstring should fit on one line with quotes

    # Ignore some rules
    "EM101",  # Exception must not use a string literal, assign to variable first
    "EM102",  # Exception must not use an f-string literal, assign to variable first
    "ERA001", # Found commented-out code
    "G004",   # Logging statement uses f-string
    "TRY003", # Avoid specifying long messages outside the exception class
    "S311",   # random usage appropriate for data generation
    "S603",   # subprocess call security
    "S607",   # Starting a process with a partial executable path (acceptable for CLI tools)

    # Ignore not useful for tests
    "S101",    # Use of assert detected (fine in tests)
    "PLR2004", # Magic value used in comparison
    "PLW2901", # redefined-loop-name (acceptable in PyTorch/ML code)
    "TRY301",  # raise-within-try (appropriate for input validation)

    # Style preferences
    "FBT",     # Boolean positional arg issues
    "PLR0912", # Too many branches (acceptable for complex filtering functions)
    "PLR0913", # Too many arguments
    "PLR0915", # Too many statements
    "SIM102",  # Nested if
    "RUF012",  # Mutable class attributes
    "PERF401", # List comprehension
    "PERF403", # Dict comprehension
    "E501",    # Line too long
    "D404",    # Docstring first word
    "N812",    # Import naming
    "SIM210",  # Unnecessary True if
    "N806",    # Variable naming
    "C403",    # Unnecessary list comp
    "SIM103",  # Return negated
    "C408",    # Unnecessary list()
    "PT006",   # Pytest parametrize
    "RUF043",  # Regex patterns
    "SIM117",  # Nested with
    "D105",    # Missing docstring magic
    "SIM118",  # key not in dict.keys
    "RET504",  # Unnecessary assignment
    "D417",    # Missing arg desc
    "PTH",     # Pathlib usage
    "DTZ005",  # datetime.now with timezone.utc is correct for py39+
]

[tool.mypy]
python_version = "3.10"
show_error_codes = true
follow_imports = "normal"
local_partial_types = true
strict_equality = true
no_implicit_optional = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
extra_checks = true
check_untyped_defs = true
warn_unreachable = true

warn_return_any = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = ["--strict-markers", "--strict-config", "--disable-warnings"]
